// lib/screens/strafgelder_screen.dart
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class StrafgelderScreen extends StatefulWidget {
  @override
  _StrafgelderScreenState createState() => _StrafgelderScreenState();
}

class _StrafgelderScreenState extends State<StrafgelderScreen> {
  final Map<String, List<Map<String, String>>> strafgelderByMember = {};
  final bool isSpiess = true; // â›³ Dummy fÃ¼r SpieÃŸrolle (true = hat Rechte)

  final TextEditingController memberController = TextEditingController();
  final TextEditingController reasonController = TextEditingController();

  final String apiBaseUrl = 'https://your-api-gateway-url.com';

  @override
  void initState() {
    super.initState();
    fetchStrafgelder();
  }

  Future<void> fetchStrafgelder() async {
    try {
      final response = await http.get(Uri.parse('$apiBaseUrl/fines/all'));
      if (response.statusCode == 200) {
        final List<dynamic> data = json.decode(response.body);
        setState(() {
          strafgelderByMember.clear();
          for (var item in data) {
            final member = item['memberId'] ?? '';
            final reason = item['reason'] ?? '';
            if (!strafgelderByMember.containsKey(member)) {
              strafgelderByMember[member] = [];
            }
            strafgelderByMember[member]!.add({'reason': reason});
          }
        });
      } else {
        print('Fehler beim Laden: ${response.statusCode}');
      }
    } catch (e) {
      print('Fehler beim Abrufen: $e');
    }
  }

  Future<void> addStrafgeld(String member, String reason) async {
    try {
      final response = await http.post(
        Uri.parse('$apiBaseUrl/fines'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({'memberId': member, 'reason': reason}),
      );

      if (response.statusCode == 200) {
        await fetchStrafgelder();
      } else {
        print('Fehler beim Speichern: ${response.statusCode}');
      }
    } catch (e) {
      print('Fehler beim Speichern: $e');
    }

    memberController.clear();
    reasonController.clear();
  }

  void openAddDialog() {
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: Text('Strafgeld vergeben'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: memberController,
              decoration: InputDecoration(labelText: 'Mitglied'),
            ),
            TextField(
              controller: reasonController,
              decoration: InputDecoration(labelText: 'Grund'),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Abbrechen'),
          ),
          ElevatedButton(
            onPressed: () {
              addStrafgeld(memberController.text, reasonController.text);
              Navigator.pop(context);
            },
            child: Text('Vergabe'),
          )
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('ðŸ’° Strafgelder')),
      body: ListView(
        children: strafgelderByMember.entries.map((entry) {
          return ExpansionTile(
            title: Text(entry.key),
            children: entry.value.map((fine) {
              return ListTile(
                title: Text(fine['reason'] ?? ''),
              );
            }).toList(),
          );
        }).toList(),
      ),
      floatingActionButton: isSpiess
          ? FloatingActionButton(
              onPressed: openAddDialog,
              child: Icon(Icons.add),
              tooltip: 'Strafgeld vergeben',
            )
          : null,
    );
  }
}
