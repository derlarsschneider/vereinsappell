# Terraform f端r AWS-Backend der Sch端tzenverein-App

provider "aws" {
  region = "eu-central-1"
}

resource "aws_s3_bucket" "photo_bucket" {
  bucket = "schuetzenverein-fotos"
  force_destroy = true
}

resource "aws_dynamodb_table" "members" {
  name           = "members"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "memberId"

  attribute {
    name = "memberId"
    type = "S"
  }
}

resource "aws_dynamodb_table" "fines" {
  name           = "fines"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "fineId"

  attribute {
    name = "fineId"
    type = "S"
  }
}

resource "aws_dynamodb_table" "termine" {
  name           = "termine"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "eventId"

  attribute {
    name = "eventId"
    type = "S"
  }
}

resource "aws_iam_role" "lambda_exec" {
  name = "lambda_exec_role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_basic_execution" {
  role       = aws_iam_role.lambda_exec.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

resource "aws_lambda_function" "create_fine" {
  function_name = "createFine"
  runtime       = "nodejs20.x"
  role          = aws_iam_role.lambda_exec.arn
  handler       = "index.handler"
  filename      = "lambda/createFine.zip"

  environment {
    variables = {
      FINES_TABLE = aws_dynamodb_table.fines.name
    }
  }
}

resource "aws_apigatewayv2_api" "http_api" {
  name          = "SchuetzenvereinHTTPAPI"
  protocol_type = "HTTP"
}

resource "aws_apigatewayv2_integration" "fine_integration" {
  api_id             = aws_apigatewayv2_api.http_api.id
  integration_type   = "AWS_PROXY"
  integration_uri    = aws_lambda_function.create_fine.invoke_arn
  integration_method = "POST"
  payload_format_version = "2.0"
}

resource "aws_apigatewayv2_route" "fine_route" {
  api_id    = aws_apigatewayv2_api.http_api.id
  route_key = "POST /fine"
  target    = "integrations/${aws_apigatewayv2_integration.fine_integration.id}"
}

resource "aws_lambda_permission" "apigw" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.create_fine.arn
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_apigatewayv2_api.http_api.execution_arn}/*/*"
}


# SNS-Topic f端r Push Notifications
resource "aws_sns_topic" "push_topic" {
  name = "schuetzenverein-push"
}

# Lambda-Umgebungsvariable setzen
resource "aws_lambda_function" "create_fine" {
  # ... (deine bestehende Konfiguration)
  environment {
    variables = {
      FINES_TABLE    = aws_dynamodb_table.fines.name
      PUSH_TOPIC_ARN = aws_sns_topic.push_topic.arn
    }
  }
}

# Berechtigung f端r Lambda zum Publizieren in SNS
resource "aws_iam_policy" "lambda_sns_publish" {
  name        = "LambdaSNSPublishPolicy"
  description = "Allow Lambda to publish to SNS topic"
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect = "Allow",
      Action = "sns:Publish",
      Resource = aws_sns_topic.push_topic.arn
    }]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_sns_attach" {
  role       = aws_iam_role.lambda_exec.name
  policy_arn = aws_iam_policy.lambda_sns_publish.arn
}
